//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace QtSerialPort
{
    public unsafe partial class QSerialPort : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(8)]
            public global::System.IntPtr d_ptr;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("QtSerialPortSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPortC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPortD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort7setPortERK15QSerialPortInfo")]
            internal static extern void SetPort_0(global::System.IntPtr instance, global::System.IntPtr info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort11setDataBitsENS_8DataBitsE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetDataBits_0(global::System.IntPtr instance, QSerialPort.DataBits dataBits);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort9setParityENS_6ParityE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetParity_0(global::System.IntPtr instance, QSerialPort.Parity parity);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort11setStopBitsENS_8StopBitsE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetStopBits_0(global::System.IntPtr instance, QSerialPort.StopBits stopBits);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort14setFlowControlENS_11FlowControlE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetFlowControl_0(global::System.IntPtr instance, QSerialPort.FlowControl flowControl);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort20setDataTerminalReadyEb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetDataTerminalReady_0(global::System.IntPtr instance, bool set);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort16setRequestToSendEb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetRequestToSend_0(global::System.IntPtr instance, bool set);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort5clearE6QFlagsINS_9DirectionEE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Clear_0(global::System.IntPtr instance, QSerialPort.Direction directions);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort18setDataErrorPolicyENS_15DataErrorPolicyE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetDataErrorPolicy_0(global::System.IntPtr instance, QSerialPort.DataErrorPolicy policy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK11QSerialPort5errorEv")]
            internal static extern QSerialPort.SerialPortError Error_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort10clearErrorEv")]
            internal static extern void ClearError_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort9sendBreakEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SendBreak_0(global::System.IntPtr instance, int duration);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort15setBreakEnabledEb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetBreakEnabled_0(global::System.IntPtr instance, bool set);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK11QSerialPort8portNameEv")]
            internal static extern void PortName_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort11setPortNameERK7QString")]
            internal static extern void SetPortName_0(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK11QSerialPort23settingsRestoredOnCloseEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SettingsRestoredOnClose_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort26setSettingsRestoredOnCloseEb")]
            internal static extern void SetSettingsRestoredOnClose_0(global::System.IntPtr instance, bool restore);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK11QSerialPort8dataBitsEv")]
            internal static extern QSerialPort.DataBits dataBits_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK11QSerialPort6parityEv")]
            internal static extern QSerialPort.Parity parity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK11QSerialPort8stopBitsEv")]
            internal static extern QSerialPort.StopBits stopBits_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK11QSerialPort11flowControlEv")]
            internal static extern QSerialPort.FlowControl flowControl_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort19isDataTerminalReadyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsDataTerminalReady_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort15isRequestToSendEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsRequestToSend_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort13pinoutSignalsEv")]
            internal static extern QSerialPort.PinoutSignal PinoutSignals_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN11QSerialPort5flushEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Flush_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK11QSerialPort15dataErrorPolicyEv")]
            internal static extern QSerialPort.DataErrorPolicy dataErrorPolicy_0(global::System.IntPtr instance);
        }

        /// <summary>
        /// <para>This enum describes the possible directions of the data
        /// transmission.</para>
        /// <para>Note: This enumeration is used for setting the baud rate of the
        /// device separately for each direction on some operating systems (for
        /// example, POSIX-like).</para>
        /// </summary>
        public enum Direction : uint
        {
            /// <summary>Input direction.</summary>
            Input = 1,
            /// <summary>Output direction.</summary>
            Output = 2,
            /// <summary>Simultaneously in two directions.</summary>
            AllDirections = 3
        }

        /// <summary>
        /// <para>This enum describes the baud rate which the communication device
        /// operates with.</para>
        /// <para>Note: Only the most common standard baud rates are listed in this
        /// enum.See also QSerialPort::baudRate.</para>
        /// </summary>
        public enum BaudRate
        {
            /// <summary>1200 baud.</summary>
            Baud1200 = 1200,
            /// <summary>2400 baud.</summary>
            Baud2400 = 2400,
            /// <summary>4800 baud.</summary>
            Baud4800 = 4800,
            /// <summary>9600 baud.</summary>
            Baud9600 = 9600,
            /// <summary>19200 baud.</summary>
            Baud19200 = 19200,
            /// <summary>38400 baud.</summary>
            Baud38400 = 38400,
            /// <summary>57600 baud.</summary>
            Baud57600 = 57600,
            /// <summary>115200 baud.</summary>
            Baud115200 = 115200,
            /// <summary>Unknown baud. This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</summary>
            UnknownBaud = -1
        }

        /// <summary>
        /// <para>This enum describes the number of data bits used.</para>
        /// <para>See also QSerialPort::dataBits.</para>
        /// </summary>
        public enum DataBits
        {
            /// <summary>The number of data bits in each character is 5. It is used for Baudot code. It generally only makes sense with older equipment such as teleprinters.</summary>
            Data5 = 5,
            /// <summary>The number of data bits in each character is 6. It is rarely used.</summary>
            Data6 = 6,
            /// <summary>The number of data bits in each character is 7. It is used for true ASCII. It generally only makes sense with older equipment such as teleprinters.</summary>
            Data7 = 7,
            /// <summary>The number of data bits in each character is 8. It is used for most kinds of data, as this size matches the size of a byte. It is almost universally used in newer applications.</summary>
            Data8 = 8,
            /// <summary>Unknown number of bits. This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</summary>
            UnknownDataBits = -1
        }

        /// <summary>
        /// <para>This enum describes the parity scheme used.</para>
        /// <para>See also QSerialPort::parity.</para>
        /// </summary>
        public enum Parity
        {
            /// <summary>No parity bit it sent. This is the most common parity setting. Error detection is handled by the communication protocol.</summary>
            NoParity = 0,
            /// <summary>The number of 1 bits in each character, including the parity bit, is always even.</summary>
            EvenParity = 2,
            /// <summary>The number of 1 bits in each character, including the parity bit, is always odd. It ensures that at least one state transition occurs in each character.</summary>
            OddParity = 3,
            /// <summary>Space parity. The parity bit is sent in the space signal condition. It does not provide error detection information.</summary>
            SpaceParity = 4,
            /// <summary>Mark parity. The parity bit is always set to the mark signal condition (logical 1). It does not provide error detection information.</summary>
            MarkParity = 5,
            /// <summary>Unknown parity. This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</summary>
            UnknownParity = -1
        }

        /// <summary>
        /// <para>This enum describes the number of stop bits used.</para>
        /// <para>See also QSerialPort::stopBits.</para>
        /// </summary>
        public enum StopBits
        {
            /// <summary>1 stop bit.</summary>
            OneStop = 1,
            /// <summary>1.5 stop bits. This is only for the Windows platform.</summary>
            OneAndHalfStop = 3,
            /// <summary>2 stop bits.</summary>
            TwoStop = 2,
            /// <summary>Unknown number of stop bits. This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</summary>
            UnknownStopBits = -1
        }

        /// <summary>
        /// <para>This enum describes the flow control used.</para>
        /// <para>See also QSerialPort::flowControl.</para>
        /// </summary>
        public enum FlowControl
        {
            /// <summary>No flow control.</summary>
            NoFlowControl = 0,
            /// <summary>Hardware flow control (RTS/CTS).</summary>
            HardwareControl = 1,
            /// <summary>Software flow control (XON/XOFF).</summary>
            SoftwareControl = 2,
            /// <summary>Unknown flow control. This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</summary>
            UnknownFlowControl = -1
        }

        /// <summary>
        /// <para>This enum describes the possible RS-232 pinout signals.</para>
        /// <para></para>
        /// <para>See also pinoutSignals(), QSerialPort::dataTerminalReady, and
        /// QSerialPort::requestToSend.</para>
        /// </summary>
        [Flags]
        public enum PinoutSignal : uint
        {
            /// <summary>No line active</summary>
            NoSignal = 0x0,
            /// <summary>TxD (Transmitted Data). This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</summary>
            TransmittedDataSignal = 0x1,
            /// <summary>RxD (Received Data). This value is obsolete. It is provided to keep old source code working. We strongly advise against using it in new code.</summary>
            ReceivedDataSignal = 0x2,
            /// <summary>DTR (Data Terminal Ready).</summary>
            DataTerminalReadySignal = 0x4,
            /// <summary>DCD (Data Carrier Detect).</summary>
            DataCarrierDetectSignal = 0x8,
            /// <summary>DSR (Data Set Ready).</summary>
            DataSetReadySignal = 0x10,
            /// <summary>RNG (Ring Indicator).</summary>
            RingIndicatorSignal = 0x20,
            /// <summary>RTS (Request To Send).</summary>
            RequestToSendSignal = 0x40,
            /// <summary>CTS (Clear To Send).</summary>
            ClearToSendSignal = 0x80,
            /// <summary>STD (Secondary Transmitted Data).</summary>
            SecondaryTransmittedDataSignal = 0x100,
            /// <summary>SRD (Secondary Received Data).</summary>
            SecondaryReceivedDataSignal = 0x200
        }

        public enum DataErrorPolicy
        {
            SkipPolicy = 0,
            PassZeroPolicy = 1,
            IgnorePolicy = 2,
            StopReceivingPolicy = 3,
            UnknownPolicy = -1
        }

        /// <summary>
        /// <para>This enum describes the errors that may be contained by the
        /// QSerialPort::error property.</para>
        /// <para>See also QSerialPort::error.</para>
        /// </summary>
        public enum SerialPortError : uint
        {
            /// <summary>No error occurred.</summary>
            NoError = 0,
            /// <summary>An error occurred while attempting to open an non-existing device.</summary>
            DeviceNotFoundError = 1,
            /// <summary>An error occurred while attempting to open an already opened device by another process or a user not having enough permission and credentials to open.</summary>
            PermissionError = 2,
            /// <summary>An error occurred while attempting to open an already opened device in this object.</summary>
            OpenError = 3,
            /// <summary>Parity error detected by the hardware while reading data.</summary>
            ParityError = 4,
            /// <summary>Framing error detected by the hardware while reading data.</summary>
            FramingError = 5,
            /// <summary>Break condition detected by the hardware on the input line.</summary>
            BreakConditionError = 6,
            /// <summary>An I/O error occurred while writing the data.</summary>
            WriteError = 7,
            /// <summary>An I/O error occurred while reading the data.</summary>
            ReadError = 8,
            /// <summary>An I/O error occurred when a resource becomes unavailable, e.g. when the device is unexpectedly removed from the system.</summary>
            ResourceError = 9,
            /// <summary>The requested device operation is not supported or prohibited by the running operating system.</summary>
            UnsupportedOperationError = 10,
            /// <summary>An unidentified error occurred.</summary>
            UnknownError = 11,
            /// <summary>A timeout error occurred. This value was introduced in QtSerialPort 5.2.</summary>
            TimeoutError = 12,
            /// <summary>This error occurs when an operation is executed that can only be successfully performed if the device is open. This value was introduced in QtSerialPort 5.2.</summary>
            NotOpenError = 13
        }

        internal unsafe partial class QPrivateSignal
        {
            [StructLayout(LayoutKind.Explicit, Size = 1)]
            public partial struct Internal
            {
            }
        }

        public event Action<QSerialPort.DataBits> DataBitsChanged
        {
        	add
        	{
                ConnectDynamicSlot(this, "dataBitsChanged(QSerialPort.DataBits)", value);
        	}
        	remove
        	{
                DisconnectDynamicSlot(this, "dataBitsChanged(QSerialPort.DataBits)", value);
        	}
        }

        public event Action<QSerialPort.Parity> ParityChanged
        {
        	add
        	{
                ConnectDynamicSlot(this, "parityChanged(QSerialPort.Parity)", value);
        	}
        	remove
        	{
                DisconnectDynamicSlot(this, "parityChanged(QSerialPort.Parity)", value);
        	}
        }

        public event Action<QSerialPort.StopBits> StopBitsChanged
        {
        	add
        	{
                ConnectDynamicSlot(this, "stopBitsChanged(QSerialPort.StopBits)", value);
        	}
        	remove
        	{
                DisconnectDynamicSlot(this, "stopBitsChanged(QSerialPort.StopBits)", value);
        	}
        }

        public event Action<QSerialPort.FlowControl> FlowControlChanged
        {
        	add
        	{
                ConnectDynamicSlot(this, "flowControlChanged(QSerialPort.FlowControl)", value);
        	}
        	remove
        	{
                DisconnectDynamicSlot(this, "flowControlChanged(QSerialPort.FlowControl)", value);
        	}
        }

        public event Action<QSerialPort.DataErrorPolicy> DataErrorPolicyChanged
        {
        	add
        	{
                ConnectDynamicSlot(this, "dataErrorPolicyChanged(QSerialPort.DataErrorPolicy)", value);
        	}
        	remove
        	{
                DisconnectDynamicSlot(this, "dataErrorPolicyChanged(QSerialPort.DataErrorPolicy)", value);
        	}
        }

        public event Action<bool> DataTerminalReadyChanged
        {
        	add
        	{
                ConnectDynamicSlot(this, "dataTerminalReadyChanged(bool)", value);
        	}
        	remove
        	{
                DisconnectDynamicSlot(this, "dataTerminalReadyChanged(bool)", value);
        	}
        }

        public event Action<bool> RequestToSendChanged
        {
        	add
        	{
                ConnectDynamicSlot(this, "requestToSendChanged(bool)", value);
        	}
        	remove
        	{
                DisconnectDynamicSlot(this, "requestToSendChanged(bool)", value);
        	}
        }

        public event Action<QSerialPort.SerialPortError> ErrorSerialPortError
        {
        	add
        	{
                ConnectDynamicSlot(this, "error(QSerialPort.SerialPortError)", value);
        	}
        	remove
        	{
                DisconnectDynamicSlot(this, "error(QSerialPort.SerialPortError)", value);
        	}
        }

        public event Action<bool> SettingsRestoredOnCloseChanged
        {
        	add
        	{
                ConnectDynamicSlot(this, "settingsRestoredOnCloseChanged(bool)", value);
        	}
        	remove
        	{
                DisconnectDynamicSlot(this, "settingsRestoredOnCloseChanged(bool)", value);
        	}
        }

        public global::System.IntPtr __Instance { get; protected set; }

        private readonly bool __ownsNativeInstance;

        public static QSerialPort __CreateInstance(global::System.IntPtr native)
        {
            return new QSerialPort((QSerialPort.Internal*) native);
        }

        public static QSerialPort __CreateInstance(QSerialPort.Internal native)
        {
            return new QSerialPort(native);
        }

        private static QSerialPort.Internal* __CopyValue(QSerialPort.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            QtSerialPort.QSerialPort.Internal.cctor_3(ret, new global::System.IntPtr(&native));
            return (QSerialPort.Internal*) ret;
        }

        private QSerialPort(QSerialPort.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
        }

        protected QSerialPort(QSerialPort.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
            if (__Instance != global::System.IntPtr.Zero && !isInternalImpl)
                SetupVTables(__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            Internal.dtor_0(__Instance);
            if (__ownsNativeInstance)
            {
                Marshal.FreeHGlobal(__Instance);
            }
        }

        /// <summary>
        /// <para>Sets the port stored in the serial port info instance
        /// serialPortInfo.</para>
        /// <para>See also portName() and QSerialPortInfo.</para>
        /// </summary>
        public void SetPort(QSerialPortInfo info)
        {
            var arg0 = ReferenceEquals(info, null) ? global::System.IntPtr.Zero : info.__Instance;
            Internal.SetPort_0(__Instance, arg0);
        }

        public bool SetDataBits(QSerialPort.DataBits dataBits)
        {
            var arg0 = dataBits;
            var __ret = Internal.SetDataBits_0(__Instance, arg0);
            return __ret;
        }

        public bool SetParity(QSerialPort.Parity parity)
        {
            var arg0 = parity;
            var __ret = Internal.SetParity_0(__Instance, arg0);
            return __ret;
        }

        public bool SetStopBits(QSerialPort.StopBits stopBits)
        {
            var arg0 = stopBits;
            var __ret = Internal.SetStopBits_0(__Instance, arg0);
            return __ret;
        }

        public bool SetFlowControl(QSerialPort.FlowControl flowControl)
        {
            var arg0 = flowControl;
            var __ret = Internal.SetFlowControl_0(__Instance, arg0);
            return __ret;
        }

        public bool SetDataTerminalReady(bool set)
        {
            var __ret = Internal.SetDataTerminalReady_0(__Instance, set);
            return __ret;
        }

        public bool SetRequestToSend(bool set)
        {
            var __ret = Internal.SetRequestToSend_0(__Instance, set);
            return __ret;
        }

        /// <summary>
        /// <para>Discards all characters from the output or input buffer,
        /// depending on given directions directions. This includes clearing the
        /// internal class buffers and the UART (driver) buffers. Also terminate
        /// pending read or write operations. If successful, returns true; otherwise
        /// returns false.</para>
        /// <para>Note: The serial port has to be open before trying to clear any
        /// buffered data; otherwise returns false and sets the NotOpenError error
        /// code.</para>
        /// <para></para>
        /// <para>[virtual] void QSerialPort::close()</para>
        /// <para>Reimplemented from QIODevice::close().</para>
        /// <para>Note: The serial port has to be open before trying to close it;
        /// otherwise sets the NotOpenError error code.See also
        /// QIODevice::close().</para>
        /// </summary>
        public bool Clear(QSerialPort.Direction directions = QSerialPort.Direction.AllDirections)
        {
            var arg0 = directions;
            var __ret = Internal.Clear_0(__Instance, arg0);
            return __ret;
        }

        public bool SetDataErrorPolicy(QSerialPort.DataErrorPolicy policy = QSerialPort.DataErrorPolicy.IgnorePolicy)
        {
            var arg0 = policy;
            var __ret = Internal.SetDataErrorPolicy_0(__Instance, arg0);
            return __ret;
        }

        public QSerialPort.SerialPortError Error()
        {
            var __ret = Internal.Error_0(__Instance);
            return __ret;
        }

        public void ClearError()
        {
            Internal.ClearError_0(__Instance);
        }

        /// <summary>
        /// <para>Sends a continuous stream of zero bits during a specified period
        /// of time duration in msec if the terminal is using asynchronous serial data.
        /// If successful, returns true; otherwise returns false.</para>
        /// <para>If the duration is zero then zero bits are transmitted by at
        /// least 0.25 seconds, but no more than 0.5 seconds.</para>
        /// <para>If the duration is non zero then zero bits are transmitted within
        /// a certain period of time depending on the implementation.</para>
        /// <para>Note: The serial port has to be open before trying to send a
        /// break duration; otherwise returns false and sets the NotOpenError error
        /// code.See also setBreakEnabled().</para>
        /// </summary>
        public bool SendBreak(int duration = 0)
        {
            var __ret = Internal.SendBreak_0(__Instance, duration);
            return __ret;
        }

        /// <summary>
        /// <para>Controls the signal break, depending on the flag set. If
        /// successful, returns true; otherwise returns false.</para>
        /// <para>If set is true then enables the break transmission; otherwise
        /// disables.</para>
        /// <para>Note: The serial port has to be open before trying to set break
        /// enabled; otherwise returns false and sets the NotOpenError error code.See
        /// also sendBreak().</para>
        /// </summary>
        public bool SetBreakEnabled(bool set = true)
        {
            var __ret = Internal.SetBreakEnabled_0(__Instance, set);
            return __ret;
        }

        /// <summary>
        /// <para>Returns the name set by setPort() or passed to the QSerialPort
        /// constructor. This name is short, i.e. it is extracted and converted from
        /// the internal variable system location of the device. The conversion
        /// algorithm is platform specific:</para>
        /// <para></para>
        /// <para> PlatformBrief Description</para>
        /// <para>Windows	Removes the prefix &quot;\\.\&quot; or &quot;//./&quot;
        /// from the system location and returns the remainder of the string.</para>
        /// <para>Windows CE	Removes the suffix &quot;:&quot; from the system
        /// location and returns the remainder of the string.</para>
        /// <para>Symbian	Returns the system location as it is, as it is equivalent
        /// to the port name.</para>
        /// <para>Unix, BSD	Removes the prefix &quot;/dev/&quot; from the system
        /// location and returns the remainder of the string.</para>
        /// <para></para>
        /// <para>See also setPortName(), setPort(), and
        /// QSerialPortInfo::portName().</para>
        /// <para></para>
        /// <para>Sets the name of the serial port.</para>
        /// <para>The name of the serial port can be passed as either a short name
        /// or the long system location if necessary.</para>
        /// <para>See also portName() and QSerialPortInfo.</para>
        /// </summary>
        public string PortName
        {
            get
            {
                var __ret = new QString.Internal();
                Internal.PortName_0(new IntPtr(&__ret), __Instance);
                return Marshal.PtrToStringUni(new IntPtr(new QString(__ret).Utf16));
            }

            set
            {
                var __qstring0 = QString.FromUtf16((ushort*) Marshal.StringToHGlobalUni(value).ToPointer(), value.Length);
                var arg0 = ReferenceEquals(__qstring0, null) ? global::System.IntPtr.Zero : __qstring0.__Instance;
                Internal.SetPortName_0(__Instance, arg0);
            }
        }

        public bool SettingsRestoredOnClose
        {
            get
            {
                var __ret = Internal.SettingsRestoredOnClose_0(__Instance);
                return __ret;
            }

            set
            {
                Internal.SetSettingsRestoredOnClose_0(__Instance, value);
            }
        }

        /// <summary>
        /// <para>This property holds the data bits in a frame.</para>
        /// <para>If the setting is successful or set before opening the port,
        /// returns true; otherwise returns false and sets an error code which can be
        /// obtained by accessing the value of the QSerialPort::error property.</para>
        /// <para>Note: If the setting is set before opening the port, the actual
        /// serial port setting is done automatically in the QSerialPort::open() method
        /// right after that the opening of the port succeeds.The default value is
        /// Data8, i.e. 8 data bits.</para>
        /// </summary>
        public QSerialPort.DataBits dataBits
        {
            get
            {
                var __ret = Internal.dataBits_0(__Instance);
                return __ret;
            }
        }

        /// <summary>
        /// <para>This property holds the parity checking mode.</para>
        /// <para>If the setting is successful or set before opening the port,
        /// returns true; otherwise returns false and sets an error code which can be
        /// obtained by accessing the value of the QSerialPort::error property.</para>
        /// <para>Note: If the setting is set before opening the port, the actual
        /// serial port setting is done automatically in the QSerialPort::open() method
        /// right after that the opening of the port succeeds.The default value is
        /// NoParity, i.e. no parity.</para>
        /// </summary>
        public QSerialPort.Parity parity
        {
            get
            {
                var __ret = Internal.parity_0(__Instance);
                return __ret;
            }
        }

        /// <summary>
        /// <para>This property holds the number of stop bits in a frame.</para>
        /// <para>If the setting is successful or set before opening the port,
        /// returns true; otherwise returns false and sets an error code which can be
        /// obtained by accessing the value of the QSerialPort::error property.</para>
        /// <para>Note: If the setting is set before opening the port, the actual
        /// serial port setting is done automatically in the QSerialPort::open() method
        /// right after that the opening of the port succeeds.The default value is
        /// OneStop, i.e. 1 stop bit.</para>
        /// </summary>
        public QSerialPort.StopBits stopBits
        {
            get
            {
                var __ret = Internal.stopBits_0(__Instance);
                return __ret;
            }
        }

        /// <summary>
        /// <para>This property holds the desired flow control mode.</para>
        /// <para>If the setting is successful or set before opening the port,
        /// returns true; otherwise returns false and sets an error code which can be
        /// obtained by accessing the value of the QSerialPort::error property.</para>
        /// <para>Note: If the setting is set before opening the port, the actual
        /// serial port setting is done automatically in the QSerialPort::open() method
        /// right after that the opening of the port succeeds.The default value is
        /// NoFlowControl, i.e. no flow control.</para>
        /// </summary>
        public QSerialPort.FlowControl flowControl
        {
            get
            {
                var __ret = Internal.flowControl_0(__Instance);
                return __ret;
            }
        }

        public bool IsDataTerminalReady
        {
            get
            {
                var __ret = Internal.IsDataTerminalReady_0(__Instance);
                return __ret;
            }
        }

        public bool IsRequestToSend
        {
            get
            {
                var __ret = Internal.IsRequestToSend_0(__Instance);
                return __ret;
            }
        }

        /// <summary>
        /// <para>Returns the state of the line signals in a bitmap format.</para>
        /// <para>From this result, it is possible to allocate the state of the
        /// desired signal by applying a mask &quot;AND&quot;, where the mask is the
        /// desired enumeration value from QSerialPort::PinoutSignals.</para>
        /// <para>Note: This method performs a system call, thus ensuring that the
        /// line signal states are returned properly. This is necessary when the
        /// underlying operating systems cannot provide proper notifications about the
        /// changes.Note: The serial port has to be open before trying to get the
        /// pinout signals; otherwise returns NoSignal and sets the NotOpenError error
        /// code.See also QSerialPort::dataTerminalReady and
        /// QSerialPort::requestToSend.</para>
        /// </summary>
        public QSerialPort.PinoutSignal PinoutSignals
        {
            get
            {
                var __ret = Internal.PinoutSignals_0(__Instance);
                return __ret;
            }
        }

        /// <summary>
        /// <para>This function writes as much as possible from the internal write
        /// buffer to the underlying serial port without blocking. If any data was
        /// written, this function returns true; otherwise returns false.</para>
        /// <para>Call this function for sending the buffered data immediately to
        /// the serial port. The number of bytes successfully written depends on the
        /// operating system. In most cases, this function does not need to be called,
        /// because the QSerialPort class will start sending data automatically once
        /// control is returned to the event loop. In the absence of an event loop,
        /// call waitForBytesWritten() instead.</para>
        /// <para>Note: The serial port has to be open before trying to flush any
        /// buffered data; otherwise returns false and sets the NotOpenError error
        /// code.See also write() and waitForBytesWritten().</para>
        /// </summary>
        public bool Flush
        {
            get
            {
                var __ret = Internal.Flush_0(__Instance);
                return __ret;
            }
        }

        public QSerialPort.DataErrorPolicy dataErrorPolicy
        {
            get
            {
                var __ret = Internal.dataErrorPolicy_0(__Instance);
                return __ret;
            }
        }

        #region Virtual table interop

        // virtual ~QSerialPort()
        [SuppressUnmanagedCodeSecurity]
        [UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.ThisCall)]
        internal delegate void _dtor_0Delegate(global::System.IntPtr instance);
        private static _dtor_0Delegate _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!_References.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var target = (QSerialPort) _References[instance].Target;
            target.Dispose();
        }

        private static void*[] _OldVTables;
        private static void*[] _NewVTables;
        private static void*[] _Thunks;
        private static System.Collections.Generic.Dictionary<IntPtr, WeakReference> _References;

        void SetupVTables(global::System.IntPtr instance)
        {
            var native = (Internal*)instance.ToPointer();

            if (_References == null)
                _References = new System.Collections.Generic.Dictionary<IntPtr, WeakReference>();

            if (_References.ContainsKey(instance))
                return;

            _References[instance] = new WeakReference(this);

            if (_OldVTables == null)
            {
                _OldVTables = new void*[1];
                _OldVTables[0] = native->vfptr0.ToPointer();
            }

            if (_Thunks == null)
            {
                _Thunks = new void*[1];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (_NewVTables == null)
            {
                _NewVTables = new void*[1];
                var vfptr0 = Marshal.AllocHGlobal(27 * 4);
                _NewVTables[0] = vfptr0.ToPointer();
                *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                *(void**)(vfptr0 + 16) = _Thunks[0];
                *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                *(void**)(vfptr0 + 72) = *(void**)(native->vfptr0 + 72);
                *(void**)(vfptr0 + 76) = *(void**)(native->vfptr0 + 76);
                *(void**)(vfptr0 + 80) = *(void**)(native->vfptr0 + 80);
                *(void**)(vfptr0 + 84) = *(void**)(native->vfptr0 + 84);
                *(void**)(vfptr0 + 88) = *(void**)(native->vfptr0 + 88);
                *(void**)(vfptr0 + 92) = *(void**)(native->vfptr0 + 92);
                *(void**)(vfptr0 + 96) = *(void**)(native->vfptr0 + 96);
                *(void**)(vfptr0 + 100) = *(void**)(native->vfptr0 + 100);
                *(void**)(vfptr0 + 104) = *(void**)(native->vfptr0 + 104);
                *(void**)(vfptr0 + 108) = *(void**)(native->vfptr0 + 108);
            }

            native->vfptr0 = new IntPtr(_NewVTables[0]);
        }

        #endregion
    }

    public unsafe partial class QSerialPortInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            internal QScopedPointer.Internal d_ptr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN15QSerialPortInfoC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN15QSerialPortInfoC2ERK11QSerialPort")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr port);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN15QSerialPortInfoC2ERK7QString")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN15QSerialPortInfoC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN15QSerialPortInfoD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZN15QSerialPortInfo4swapERS_")]
            internal static extern void Swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK15QSerialPortInfo8portNameEv")]
            internal static extern void PortName_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK15QSerialPortInfo14systemLocationEv")]
            internal static extern void SystemLocation_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK15QSerialPortInfo11descriptionEv")]
            internal static extern void Description_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK15QSerialPortInfo12manufacturerEv")]
            internal static extern void Manufacturer_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK15QSerialPortInfo12serialNumberEv")]
            internal static extern void SerialNumber_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK15QSerialPortInfo19hasVendorIdentifierEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasVendorIdentifier_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK15QSerialPortInfo20hasProductIdentifierEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasProductIdentifier_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK15QSerialPortInfo6isBusyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsBusy_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.ThisCall,
                EntryPoint="_ZNK15QSerialPortInfo7isValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("Qt5SerialPort", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15QSerialPortInfo14availablePortsEv")]
            internal static extern QList.Internal AvailablePorts_0();
        }

        public global::System.IntPtr __Instance { get; protected set; }

        private readonly bool __ownsNativeInstance;

        public static QSerialPortInfo __CreateInstance(global::System.IntPtr native)
        {
            return new QSerialPortInfo((QSerialPortInfo.Internal*) native);
        }

        public static QSerialPortInfo __CreateInstance(QSerialPortInfo.Internal native)
        {
            return new QSerialPortInfo(native);
        }

        private static QSerialPortInfo.Internal* __CopyValue(QSerialPortInfo.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            QtSerialPort.QSerialPortInfo.Internal.cctor_3(ret, new global::System.IntPtr(&native));
            return (QSerialPortInfo.Internal*) ret;
        }

        private QSerialPortInfo(QSerialPortInfo.Internal native)
            : this(__CopyValue(native))
        {
            __ownsNativeInstance = true;
        }

        protected QSerialPortInfo(QSerialPortInfo.Internal* native, bool isInternalImpl = false)
        {
            __Instance = new global::System.IntPtr(native);
        }

        /// <summary>
        /// <para>Constructs an empty QSerialPortInfo object.</para>
        /// <para>See also isNull().</para>
        /// </summary>
        public QSerialPortInfo()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            Internal.ctor_0(__Instance);
        }

        /// <summary>
        /// <para>Constructs a QSerialPortInfo object from serial port.</para>
        /// </summary>
        public QSerialPortInfo(QSerialPort port)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            var arg0 = ReferenceEquals(port, null) ? global::System.IntPtr.Zero : port.__Instance;
            Internal.ctor_1(__Instance, arg0);
        }

        /// <summary>
        /// <para>Constructs a QSerialPortInfo object from serial port name.</para>
        /// <para>This constructor finds the relevant serial port among the
        /// available ones according to the port name name, and constructs the serial
        /// port info instance for that port.</para>
        /// </summary>
        public QSerialPortInfo(string name)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            var __qstring0 = QString.FromUtf16((ushort*) Marshal.StringToHGlobalUni(name).ToPointer(), name.Length);
            var arg0 = ReferenceEquals(__qstring0, null) ? global::System.IntPtr.Zero : __qstring0.__Instance;
            Internal.ctor_2(__Instance, arg0);
        }

        /// <summary>
        /// <para>Constructs a copy of other.</para>
        /// </summary>
        public QSerialPortInfo(QSerialPortInfo other)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            var arg0 = ReferenceEquals(other, null) ? global::System.IntPtr.Zero : other.__Instance;
            Internal.cctor_3(__Instance, arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            Internal.dtor_0(__Instance);
            if (__ownsNativeInstance)
            {
                Marshal.FreeHGlobal(__Instance);
            }
        }

        /// <summary>
        /// <para>Swaps QSerialPortInfo other with this QSerialPortInfo. This
        /// operation is very fast and never fails.</para>
        /// </summary>
        public void Swap(QSerialPortInfo other)
        {
            var arg0 = ReferenceEquals(other, null) ? global::System.IntPtr.Zero : other.__Instance;
            Internal.Swap_0(__Instance, arg0);
        }

        /// <summary>
        /// <para>Returns the name of the serial port.</para>
        /// <para>See also systemLocation().</para>
        /// </summary>
        public string PortName
        {
            get
            {
                var __ret = new QString.Internal();
                Internal.PortName_0(new IntPtr(&__ret), __Instance);
                return Marshal.PtrToStringUni(new IntPtr(new QString(__ret).Utf16));
            }
        }

        /// <summary>
        /// <para>Returns the system location of the serial port.</para>
        /// <para>See also portName().</para>
        /// </summary>
        public string SystemLocation
        {
            get
            {
                var __ret = new QString.Internal();
                Internal.SystemLocation_0(new IntPtr(&__ret), __Instance);
                return Marshal.PtrToStringUni(new IntPtr(new QString(__ret).Utf16));
            }
        }

        /// <summary>
        /// <para>Returns the description string of the serial port, if available;
        /// otherwise returns an empty string.</para>
        /// <para>See also manufacturer() and serialNumber().</para>
        /// </summary>
        public string Description
        {
            get
            {
                var __ret = new QString.Internal();
                Internal.Description_0(new IntPtr(&__ret), __Instance);
                return Marshal.PtrToStringUni(new IntPtr(new QString(__ret).Utf16));
            }
        }

        /// <summary>
        /// <para>Returns the manufacturer string of the serial port, if available;
        /// otherwise returns an empty string.</para>
        /// <para>See also description() and serialNumber().</para>
        /// </summary>
        public string Manufacturer
        {
            get
            {
                var __ret = new QString.Internal();
                Internal.Manufacturer_0(new IntPtr(&__ret), __Instance);
                return Marshal.PtrToStringUni(new IntPtr(new QString(__ret).Utf16));
            }
        }

        /// <summary>
        /// <para>Returns the serial number string of the serial port, if
        /// available; otherwise returns an empty string.</para>
        /// <para>Note: The serial number may include letters.This function was
        /// introduced in  Qt 5.3.</para>
        /// <para>See also description() and manufacturer().</para>
        /// </summary>
        public string SerialNumber
        {
            get
            {
                var __ret = new QString.Internal();
                Internal.SerialNumber_0(new IntPtr(&__ret), __Instance);
                return Marshal.PtrToStringUni(new IntPtr(new QString(__ret).Utf16));
            }
        }

        /// <summary>
        /// <para>Returns true if there is a valid 16-bit vendor number present;
        /// otherwise returns false.</para>
        /// <para>See also vendorIdentifier(), productIdentifier(), and
        /// hasProductIdentifier().</para>
        /// </summary>
        public bool HasVendorIdentifier
        {
            get
            {
                var __ret = Internal.HasVendorIdentifier_0(__Instance);
                return __ret;
            }
        }

        /// <summary>
        /// <para>Returns true if there is a valid 16-bit product number present;
        /// otherwise returns false.</para>
        /// <para>See also productIdentifier(), vendorIdentifier(), and
        /// hasVendorIdentifier().</para>
        /// </summary>
        public bool HasProductIdentifier
        {
            get
            {
                var __ret = Internal.HasProductIdentifier_0(__Instance);
                return __ret;
            }
        }

        /// <summary>
        /// <para>Returns true if serial port is busy; otherwise returns
        /// false.</para>
        /// <para>See also isNull().</para>
        /// </summary>
        public bool IsBusy
        {
            get
            {
                var __ret = Internal.IsBusy_0(__Instance);
                return __ret;
            }
        }

        /// <summary>
        /// <para>Returns true if serial port is present on system; otherwise
        /// returns false.</para>
        /// <para>See also isNull() and isBusy().</para>
        /// </summary>
        public bool IsValid
        {
            get
            {
                var __ret = Internal.IsValid_0(__Instance);
                return __ret;
            }
        }

        /// <summary>
        /// <para>Returns a list of available serial ports on the system.</para>
        /// </summary>
        public static System.Collections.Generic.IList<QSerialPortInfo> AvailablePorts
        {
            get
            {
                var __ret = Internal.AvailablePorts_0();
                var __qlistData = QListData.__CreateInstance(__ret._0.p);
                var __size = __qlistData.Size;
                var __list = new System.Collections.Generic.List<QSerialPortInfo>(__size);
                for (int i = 0; i < __size; i++)
                {
                    __list.Add(QSerialPortInfo.__CreateInstance(new global::System.IntPtr(__qlistData.At(i))));
                }
                return __list;
            }
        }
    }
}
